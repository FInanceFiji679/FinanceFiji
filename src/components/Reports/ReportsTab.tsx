import React from 'react';
import { Download, Calendar, TrendingUp, TrendingDown, DollarSign } from 'lucide-react';
import { useFinanceStore } from '../../hooks/useFinanceStore';

const ReportsTab: React.FC = () => {
  const { 
    monthlyArchive, 
    budgetSettings, 
    transactions, 
    totalSpent, 
    remainingSalary,
    needsSpent,
    wantsSpent,
    responsibilitiesSpent,
    fixedExpensesTotal
  } = useFinanceStore();

  const currentMonth = new Date().toLocaleString('default', { month: 'long' });
  const currentYear = new Date().getFullYear();

  const currentMonthData = {
    month: currentMonth,
    year: currentYear,
    monthlyIncome: budgetSettings.monthlyIncome,
    needsSpent,
    wantsSpent,
    responsibilitiesSpent,
    fixedExpensesTotal,
    totalSpent,
    remainingSalary,
    transactions: transactions.length
  };

  const exportReport = (monthData: any) => {
    const reportLines = [
      `Finance Fiji Report - ${monthData.month} ${monthData.year}`,
      `Generated: ${new Date().toLocaleDateString()}`,
      '',
      'INCOME & EXPENSES',
      '==================',
      `Monthly Income: $${monthData.monthlyIncome.toFixed(2)}`,
      `Total Spent: $${monthData.totalSpent.toFixed(2)}`,
      `Remaining: $${monthData.remainingSalary.toFixed(2)}`,
      '',
      'CATEGORY BREAKDOWN',
      '==================',
      `Needs: $${monthData.needsSpent.toFixed(2)}`,
      `Wants: $${monthData.wantsSpent.toFixed(2)}`,
      `Savings: $${monthData.responsibilitiesSpent.toFixed(2)}`,
      `Fixed Expenses: $${monthData.fixedExpensesTotal.toFixed(2)}`,
      '',
      `Total Transactions: ${monthData.transactions}`,
      '',
      'Generated by Finance Fiji'
    ];

    const blob = new Blob([reportLines.join('\n')], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `finance-report-${monthData.month}-${monthData.year}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="pb-20 md:pb-0">
      {/* Header */}
      <div className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-6 rounded-2xl mb-6">
        <h1 className="text-2xl font-bold mb-2">Financial Reports</h1>
        <p className="text-purple-100">View your monthly summaries</p>
      </div>

      {/* Current Month Report */}
      <div className="bg-white rounded-xl border border-gray-200 mb-6">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold text-gray-800">Current Month</h2>
              <p className="text-gray-600">{currentMonth} {currentYear}</p>
            </div>
            <button
              onClick={() => exportReport(currentMonthData)}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Download className="h-4 w-4" />
              <span>Export</span>
            </button>
          </div>
        </div>

        <div className="p-6">
          {/* Summary Cards */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div className="bg-emerald-50 rounded-xl p-4 border border-emerald-200">
              <div className="flex items-center space-x-3">
                <TrendingUp className="h-6 w-6 text-emerald-600" />
                <div>
                  <p className="text-sm font-medium text-emerald-800">Income</p>
                  <p className="text-xl font-bold text-emerald-900">${currentMonthData.monthlyIncome.toFixed(2)}</p>
                </div>
              </div>
            </div>

            <div className="bg-red-50 rounded-xl p-4 border border-red-200">
              <div className="flex items-center space-x-3">
                <TrendingDown className="h-6 w-6 text-red-600" />
                <div>
                  <p className="text-sm font-medium text-red-800">Spent</p>
                  <p className="text-xl font-bold text-red-900">${currentMonthData.totalSpent.toFixed(2)}</p>
                </div>
              </div>
            </div>

            <div className={`${currentMonthData.remainingSalary >= 0 ? 'bg-blue-50 border-blue-200' : 'bg-red-50 border-red-200'} rounded-xl p-4 border`}>
              <div className="flex items-center space-x-3">
                <DollarSign className={`h-6 w-6 ${currentMonthData.remainingSalary >= 0 ? 'text-blue-600' : 'text-red-600'}`} />
                <div>
                  <p className={`text-sm font-medium ${currentMonthData.remainingSalary >= 0 ? 'text-blue-800' : 'text-red-800'}`}>Remaining</p>
                  <p className={`text-xl font-bold ${currentMonthData.remainingSalary >= 0 ? 'text-blue-900' : 'text-red-900'}`}>
                    ${currentMonthData.remainingSalary.toFixed(2)}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-purple-50 rounded-xl p-4 border border-purple-200">
              <div className="flex items-center space-x-3">
                <Calendar className="h-6 w-6 text-purple-600" />
                <div>
                  <p className="text-sm font-medium text-purple-800">Transactions</p>
                  <p className="text-xl font-bold text-purple-900">{currentMonthData.transactions}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Category Breakdown */}
          <div className="space-y-3">
            <h3 className="text-lg font-semibold text-gray-800">Spending Breakdown</h3>
            
            <div className="flex items-center justify-between p-3 bg-emerald-50 rounded-lg">
              <span className="font-medium text-emerald-800">Needs</span>
              <span className="font-bold text-emerald-900">${currentMonthData.needsSpent.toFixed(2)}</span>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-amber-50 rounded-lg">
              <span className="font-medium text-amber-800">Wants</span>
              <span className="font-bold text-amber-900">${currentMonthData.wantsSpent.toFixed(2)}</span>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
              <span className="font-medium text-blue-800">Savings</span>
              <span className="font-bold text-blue-900">${currentMonthData.responsibilitiesSpent.toFixed(2)}</span>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
              <span className="font-medium text-purple-800">Fixed Expenses</span>
              <span className="font-bold text-purple-900">${currentMonthData.fixedExpensesTotal.toFixed(2)}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Archived Reports */}
      {monthlyArchive.length > 0 && (
        <div className="bg-white rounded-xl border border-gray-200">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-800">Previous Months</h2>
          </div>

          <div className="divide-y divide-gray-200">
            {monthlyArchive.map((monthData, index) => (
              <div key={index} className="p-6 hover:bg-gray-50 transition-colors">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 bg-gray-100 rounded-xl">
                      <Calendar className="h-6 w-6 text-gray-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-800">{monthData.month} {monthData.year}</h3>
                      <p className="text-sm text-gray-500">
                        Income: ${monthData.budgetSettings.monthlyIncome.toFixed(2)} | 
                        Spent: ${monthData.totalSpent.toFixed(2)}
                      </p>
                    </div>
                  </div>
                  
                  <button
                    onClick={() => exportReport({
                      ...monthData,
                      needsSpent: monthData.transactions.filter(t => t.category === 'needs').reduce((sum, t) => sum + t.amount, 0),
                      wantsSpent: monthData.transactions.filter(t => t.category === 'wants').reduce((sum, t) => sum + t.amount, 0),
                      responsibilitiesSpent: monthData.transactions.filter(t => t.category === 'responsibilities').reduce((sum, t) => sum + t.amount, 0),
                      fixedExpensesTotal: monthData.budgetSettings.fixedExpenses.reduce((sum, e) => sum + e.amount, 0),
                      monthlyIncome: monthData.budgetSettings.monthlyIncome,
                      transactions: monthData.transactions.length
                    })}
                    className="flex items-center space-x-2 px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    <Download className="h-4 w-4" />
                    <span className="text-sm">Export</span>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {monthlyArchive.length === 0 && (
        <div className="bg-white rounded-xl border border-gray-200 p-12 text-center">
          <Calendar className="h-16 w-16 mx-auto mb-4 text-gray-300" />
          <h3 className="text-lg font-medium text-gray-800 mb-2">No Previous Reports</h3>
          <p className="text-gray-600">Complete your first month to see archived reports</p>
        </div>
      )}
    </div>
  );
};

export default ReportsTab;