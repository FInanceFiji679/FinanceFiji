import React, { useState } from 'react';
import { Download, Calendar, PieChart, BarChart3, FileText, TrendingUp } from 'lucide-react';
import { useFinanceStore } from '../../hooks/useFinanceStore';

const ReportsTab: React.FC = () => {
  const { monthlyArchive, budgetSettings, transactions, totalSpent, remainingSalary } = useFinanceStore();
  const [selectedMonth, setSelectedMonth] = useState<string>('');

  const currentMonth = new Date().toLocaleString('default', { month: 'long' });
  const currentYear = new Date().getFullYear();

  const generateCurrentMonthReport = () => {
    const needsSpent = transactions.filter(t => t.category === 'needs').reduce((sum, t) => sum + t.amount, 0);
    const wantsSpent = transactions.filter(t => t.category === 'wants').reduce((sum, t) => sum + t.amount, 0);
    const responsibilitiesSpent = transactions.filter(t => t.category === 'responsibilities').reduce((sum, t) => sum + t.amount, 0);
    const fixedExpensesTotal = budgetSettings.fixedExpenses.reduce((sum, e) => sum + e.amount, 0);

    return {
      month: currentMonth,
      year: currentYear,
      monthlyIncome: budgetSettings.monthlyIncome,
      needsSpent,
      wantsSpent,
      responsibilitiesSpent,
      fixedExpensesTotal,
      totalSpent: totalSpent,
      remainingSalary,
      transactions: transactions.length
    };
  };

  const exportReport = (monthData: any) => {
    const reportLines = [
      `Financial Report - ${monthData.month} ${monthData.year}`,
      `Generated: ${new Date().toLocaleDateString()}`,
      '',
      'INCOME & EXPENSES',
      '==================',
      `Monthly Income: $${monthData.monthlyIncome.toFixed(2)}`,
      `Total Spent: $${monthData.totalSpent.toFixed(2)}`,
      `Remaining: $${monthData.remainingSalary.toFixed(2)}`,
      '',
      'CATEGORY BREAKDOWN',
      '==================',
      `Needs: $${monthData.needsSpent.toFixed(2)}`,
      `Wants: $${monthData.wantsSpent.toFixed(2)}`,
      `Responsibilities: $${monthData.responsibilitiesSpent.toFixed(2)}`,
      `Fixed Expenses: $${monthData.fixedExpensesTotal.toFixed(2)}`,
      '',
      `Total Transactions: ${monthData.transactions}`,
      '',
      'Generated by FinanceFlow - Smart Budget Tracker'
    ];

    const blob = new Blob([reportLines.join('\n')], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `finance-report-${monthData.month}-${monthData.year}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const currentMonthData = generateCurrentMonthReport();

  return (
    <div className="max-w-6xl mx-auto space-y-8">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-slate-800 mb-2">Financial Reports</h1>
        <p className="text-slate-600">View and export your monthly financial summaries</p>
      </div>

      {/* Current Month Report */}
      <div className="bg-white rounded-2xl shadow-xl border border-slate-200">
        <div className="p-6 border-b border-slate-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-3 bg-blue-100 rounded-xl">
                <Calendar className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-slate-800">Current Month</h2>
                <p className="text-slate-600">{currentMonth} {currentYear}</p>
              </div>
            </div>
            <button
              onClick={() => exportReport(currentMonthData)}
              className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 transition-all duration-200"
            >
              <Download className="h-4 w-4" />
              <span>Export</span>
            </button>
          </div>
        </div>

        <div className="p-6">
          {/* Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="bg-emerald-50 rounded-xl p-4 border border-emerald-200">
              <div className="flex items-center space-x-3">
                <TrendingUp className="h-8 w-8 text-emerald-600" />
                <div>
                  <p className="text-sm font-medium text-emerald-800">Monthly Income</p>
                  <p className="text-2xl font-bold text-emerald-900">${currentMonthData.monthlyIncome.toFixed(2)}</p>
                </div>
              </div>
            </div>

            <div className="bg-red-50 rounded-xl p-4 border border-red-200">
              <div className="flex items-center space-x-3">
                <BarChart3 className="h-8 w-8 text-red-600" />
                <div>
                  <p className="text-sm font-medium text-red-800">Total Spent</p>
                  <p className="text-2xl font-bold text-red-900">${currentMonthData.totalSpent.toFixed(2)}</p>
                </div>
              </div>
            </div>

            <div className={`${currentMonthData.remainingSalary >= 0 ? 'bg-emerald-50 border-emerald-200' : 'bg-red-50 border-red-200'} rounded-xl p-4 border`}>
              <div className="flex items-center space-x-3">
                <PieChart className={`h-8 w-8 ${currentMonthData.remainingSalary >= 0 ? 'text-emerald-600' : 'text-red-600'}`} />
                <div>
                  <p className={`text-sm font-medium ${currentMonthData.remainingSalary >= 0 ? 'text-emerald-800' : 'text-red-800'}`}>Remaining</p>
                  <p className={`text-2xl font-bold ${currentMonthData.remainingSalary >= 0 ? 'text-emerald-900' : 'text-red-900'}`}>
                    ${currentMonthData.remainingSalary.toFixed(2)}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-purple-50 rounded-xl p-4 border border-purple-200">
              <div className="flex items-center space-x-3">
                <FileText className="h-8 w-8 text-purple-600" />
                <div>
                  <p className="text-sm font-medium text-purple-800">Transactions</p>
                  <p className="text-2xl font-bold text-purple-900">{currentMonthData.transactions}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Category Breakdown */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-semibold text-slate-800 mb-4">Spending by Category</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-emerald-50 rounded-lg">
                  <span className="font-medium text-emerald-800">Needs</span>
                  <span className="font-bold text-emerald-900">${currentMonthData.needsSpent.toFixed(2)}</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-amber-50 rounded-lg">
                  <span className="font-medium text-amber-800">Wants</span>
                  <span className="font-bold text-amber-900">${currentMonthData.wantsSpent.toFixed(2)}</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                  <span className="font-medium text-blue-800">Responsibilities</span>
                  <span className="font-bold text-blue-900">${currentMonthData.responsibilitiesSpent.toFixed(2)}</span>
                </div>
                <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
                  <span className="font-medium text-purple-800">Fixed Expenses</span>
                  <span className="font-bold text-purple-900">${currentMonthData.fixedExpensesTotal.toFixed(2)}</span>
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-slate-800 mb-4">Budget vs Actual</h3>
              <div className="space-y-3">
                <div className="p-3 bg-slate-50 rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium text-slate-700">Needs Budget</span>
                    <span className="text-sm text-slate-600">
                      ${((budgetSettings.monthlyIncome * budgetSettings.needsPercentage) / 100).toFixed(2)}
                    </span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2">
                    <div
                      className="bg-emerald-500 h-2 rounded-full"
                      style={{
                        width: `${Math.min((currentMonthData.needsSpent / ((budgetSettings.monthlyIncome * budgetSettings.needsPercentage) / 100)) * 100, 100)}%`
                      }}
                    />
                  </div>
                </div>

                <div className="p-3 bg-slate-50 rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium text-slate-700">Wants Budget</span>
                    <span className="text-sm text-slate-600">
                      ${((budgetSettings.monthlyIncome * budgetSettings.wantsPercentage) / 100).toFixed(2)}
                    </span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2">
                    <div
                      className="bg-amber-500 h-2 rounded-full"
                      style={{
                        width: `${Math.min((currentMonthData.wantsSpent / ((budgetSettings.monthlyIncome * budgetSettings.wantsPercentage) / 100)) * 100, 100)}%`
                      }}
                    />
                  </div>
                </div>

                <div className="p-3 bg-slate-50 rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-sm font-medium text-slate-700">Responsibilities Budget</span>
                    <span className="text-sm text-slate-600">
                      ${((budgetSettings.monthlyIncome * budgetSettings.responsibilitiesPercentage) / 100).toFixed(2)}
                    </span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-2">
                    <div
                      className="bg-blue-500 h-2 rounded-full"
                      style={{
                        width: `${Math.min(((currentMonthData.responsibilitiesSpent + currentMonthData.fixedExpensesTotal) / ((budgetSettings.monthlyIncome * budgetSettings.responsibilitiesPercentage) / 100)) * 100, 100)}%`
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Archived Reports */}
      {monthlyArchive.length > 0 && (
        <div className="bg-white rounded-2xl shadow-xl border border-slate-200">
          <div className="p-6 border-b border-slate-200">
            <h2 className="text-xl font-semibold text-slate-800">Archived Reports</h2>
            <p className="text-slate-600">Previous months' financial summaries</p>
          </div>

          <div className="divide-y divide-slate-200">
            {monthlyArchive.map((monthData, index) => (
              <div key={index} className="p-6 hover:bg-slate-50 transition-colors">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 bg-slate-100 rounded-xl">
                      <Calendar className="h-6 w-6 text-slate-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-slate-800">{monthData.month} {monthData.year}</h3>
                      <p className="text-sm text-slate-600">
                        Income: ${monthData.budgetSettings.monthlyIncome.toFixed(2)} | 
                        Spent: ${monthData.totalSpent.toFixed(2)} | 
                        Remaining: ${monthData.remainingSalary.toFixed(2)}
                      </p>
                    </div>
                  </div>
                  
                  <button
                    onClick={() => exportReport({
                      ...monthData,
                      needsSpent: monthData.transactions.filter(t => t.category === 'needs').reduce((sum, t) => sum + t.amount, 0),
                      wantsSpent: monthData.transactions.filter(t => t.category === 'wants').reduce((sum, t) => sum + t.amount, 0),
                      responsibilitiesSpent: monthData.transactions.filter(t => t.category === 'responsibilities').reduce((sum, t) => sum + t.amount, 0),
                      fixedExpensesTotal: monthData.budgetSettings.fixedExpenses.reduce((sum, e) => sum + e.amount, 0),
                      monthlyIncome: monthData.budgetSettings.monthlyIncome,
                      transactions: monthData.transactions.length
                    })}
                    className="flex items-center space-x-2 px-4 py-2 bg-slate-100 text-slate-700 rounded-xl hover:bg-slate-200 transition-colors"
                  >
                    <Download className="h-4 w-4" />
                    <span>Export</span>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {monthlyArchive.length === 0 && (
        <div className="bg-white rounded-2xl shadow-xl border border-slate-200 p-12 text-center">
          <FileText className="h-16 w-16 mx-auto mb-4 text-slate-300" />
          <h3 className="text-lg font-medium text-slate-800 mb-2">No Archived Reports</h3>
          <p className="text-slate-600">
            Complete your first month and reset to generate archived reports
          </p>
        </div>
      )}
    </div>
  );
};

export default ReportsTab;